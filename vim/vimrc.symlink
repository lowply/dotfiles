
"======================================================
" NeoBundle Init: https://github.com/Shougo/neobundle.vim
"======================================================

" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
	if &compatible
		set nocompatible               " Be iMproved
	endif

	" Required:
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""

NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'tpope/vim-surround'
NeoBundle "chase/vim-ansible-yaml"
NeoBundle "stephpy/vim-yaml"
NeoBundle 'tpope/vim-commentary'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'sheerun/vim-polyglot'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'rking/ag.vim'
NeoBundle 'justinmk/vim-dirvish'
"NeoBundle 'nixprime/cpsm'

"NeoBundle 'Shougo/neosnippet.vim'
"NeoBundle 'Shougo/neosnippet-snippets'
"NeoBundle 'Shougo/neomru.vim'
"NeoBundle 'Shougo/unite.vim'
"NeoBundle 'Shougo/vimfiler'
"NeoBundle 'Shougo/vimproc.vim', {
"			\ 'build' : {
"			\     'windows' : 'tools\\update-dll-mingw',
"			\     'cygwin' : 'make -f make_cygwin.mak',
"			\     'mac' : 'make -f make_mac.mak',
"			\     'unix' : 'make -f make_unix.mak',
"			\    },
"			\ }

"
" Ruby
"
NeoBundle 'vim-ruby/vim-ruby'

"
" Color Scheme
" 
NeoBundle 'altercation/vim-colors-solarized'

"
" since 7.4.414, vim merged go support. if vim is lower than that, use vim-ft-go
"
if !has('patch-7.4.414')
	NeoBundle "google/vim-ft-go"
endif

"
" extra go supports
"
NeoBundle "vim-jp/vim-go-extra"

"
" Vim After 11 Years: http://statico.github.io/vim.html
"
NeoBundle "scrooloose/syntastic"
NeoBundle "vim-scripts/closetag.vim"
" NeoBundle "fatih/vim-go" " disabled because some functions are duplicated after vim7.4.414

""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" cpsm
" let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}

"======================================================
" Ruby:
"======================================================

au FileType ruby setl nowrap tabstop=2 shiftwidth=2 softtabstop=2 expandtab

"======================================================
" Go:
"======================================================

" use goimports instead of gofmt
let g:gofmt_command = 'goimports'

" gocode, not necessary to be in ~/.vim/bundle/
" exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")

autocmd FileType go autocmd BufWritePre <buffer> Fmt
autocmd FileType go nnoremap <Leader>r :! go run %<CR>

" http://goo.gl/bHmCf5
autocmd FileType go :highlight goErr ctermfg=210
autocmd FileType go :match goErr /\<err\>/

" http://goo.gl/wGAzyq
autocmd FileType go set noexpandtab
autocmd FileType go set tabstop=4
autocmd FileType go set shiftwidth=4

" http://goo.gl/Czf9g9
set completeopt=menu,preview

"======================================================
" Neocomplete:
"======================================================

source ~/dotfiles/vim/vimrc_neocomplete

"======================================================
" SyntaxColor:
"======================================================

set t_Co=256
syntax on 
let g:solarized_termcolors=256

" Enable termtrans under tmux 1.7 & Terminal.app with xterm-256color environment
" see https://github.com/altercation/vim-colors-solarized
let g:solarized_termtrans=1

set background=dark
colorscheme solarized

"======================================================
" display
"======================================================

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3

"" Status bar
set laststatus=2

"" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

"======================================================
" Lightline
" https://github.com/itchyny/lightline.vim
"======================================================

let g:lightline = {
			\ 'mode_map': { 'c': 'NORMAL' },
			\ 'active': {
			\   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ]
			\ },
			\ 'component_function': {
			\   'modified': 'MyModified',
			\   'readonly': 'MyReadonly',
			\   'fugitive': 'MyFugitive',
			\   'filename': 'MyFilename',
			\   'fileformat': 'MyFileformat',
			\   'filetype': 'MyFiletype',
			\   'fileencoding': 'MyFileencoding',
			\   'mode': 'MyMode',
			\   'ctrlpmark': 'CtrlPMark',
			\ }
			\ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
	let fname = expand('%:t')
	return fname == 'ControlP' ? g:lightline.ctrlp_item :
	        \ fname == '__Tagbar__' ? g:lightline.fname :
	        \ fname =~ '__Gundo\|NERD_tree' ? '' :
	        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
	        \ &ft == 'unite' ? unite#get_status_string() :
	        \ &ft == 'vimshell' ? vimshell#get_status_string() :
	        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
	        \ ('' != fname ? fname : '[No Name]') .
	        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction


"======================================================
" tab
"======================================================

" set expandtab
set tabstop=4
set softtabstop=0
set shiftwidth=4
set smarttab
set shiftround
set nowrap

"======================================================
" edit
"======================================================

set whichwrap=b,s,h,l,<,>,[,]
set autoindent
set smartindent
"set showmatch
let loaded_matchparen = 1
vnoremap < <gv
vnoremap > >gv

"======================================================
" search
"======================================================

set hlsearch
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>
set incsearch
set ignorecase
set wrapscan
set smartcase

"======================================================
" backup
"======================================================

set backup
set backupdir=~/.vim_tmp
set swapfile
set directory=~/.vim_tmp

"======================================================
" encoding
"======================================================

set termencoding=utf-8
set encoding=utf-8

"======================================================
" tab editing
"======================================================

nnoremap s <Nop>
nnoremap sq :<C-u>q<CR>
nnoremap sw :<C-u>wq<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap sn gt
nnoremap sp gT

"======================================================
" some utils
"======================================================

inoremap jk <esc>

" http://goo.gl/ZSlTLG
nnoremap Q <Nop>
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
let mapleader = "\<Space>"
noremap \ ,

set pastetoggle=<F11>

" Correct indent
nnoremap Q gg=G

" http://goo.gl/bJeVID
nnoremap Y y$
set display=lastline
set pumheight=10
set showmatch
set matchtime=1
nnoremap + <C-a>
nnoremap - <C-x>
augroup swapchoice-readonly
	autocmd!
	autocmd SwapExists * let v:swapchoice = 'o'
augroup END

" http://goo.gl/6Tm4oo
" map q: and q/ 
nnoremap <F5> <CR>q:
nnoremap <F6> <CR>q/
" disable q:、q/、q?
nnoremap q: <NOP>
nnoremap q/ <NOP>
nnoremap q? <NOP>


"======================================================
" VimShell
"======================================================

" nnoremap <Leader>vv :<C-u>VimShell<CR>

"======================================================
" Unite : http://goo.gl/qYQTt5
"======================================================

" nnoremap [unite] <Nop>
" nmap <Space>u [unite]
" 
" let g:unite_enable_start_insert=1
" let g:unite_source_history_yank_enable =1
" nnoremap [unite]u  :<C-u>Unite -no-split<Space>
" nnoremap <silent> [unite]f :<C-u>Unite<Space>file<CR>
" nnoremap <silent> [unite]b :<C-u>Unite<Space>buffer<CR>
" nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
" nnoremap <silent> [unite]r :<C-u>UniteWithBufferDir file<CR>
" nnoremap <C-j> :<C-u>Unite file_mru<CR>
" nnoremap <C-f> :<C-u>Unite file_rec<CR>

"======================================================
" environment specific configuration
"======================================================

if filereadable(expand($HOME.'/.vimrc.local'))
	source ~/.vimrc.local
endif

"======================================================
" ag for CtrlP: http://christina04.hatenablog.com/entry/2014/10/30/100612
"======================================================
"if executable('ag')
"	let g:ctrlp_use_caching=0
"	let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
"endif
let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}

"======================================================
" http://postd.cc/how-to-boost-your-vim-productivity/
"======================================================
nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>w :w<CR>
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
			\:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

