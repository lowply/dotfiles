# .bashrc

# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# ---------------------------------------------------------------
# Original Setting
# ---------------------------------------------------------------

#
# aliases
#
alias jman='LANG=ja_JP.utf8 man'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ls='ls -v --color=auto'
alias tm='tmux -2u a || tmux -2u'
alias pullall='git pull origin master && git submodule foreach git pull origin master'
alias nstlnp='lsof -nP -iTCP -sTCP:LISTEN'
alias nstanp='lsof -nP -iTCP'
alias lsdsstr='find . -name .DS_Store -print'
alias rmdsstr='find . -name .DS_Store -delete -exec echo removed: {} \;'
type gsed > /dev/null 2>&1 && alias sed='gsed'
type colordiff > /dev/null 2>&1 && alias diff='colordiff'
type gls > /dev/null 2>&1 && alias ls='ls -v --color=auto'

#
# functions
#
addpath(){
	[ -d ${1} ] || { echo "[addpath] ${1} does not exist."; return; }
	if [ "${2}" == "man" ]; then
		# for MANPATH
		export MANPATH=${1}:${MANPATH//$1:/}
	else
		# for PATH
		export PATH=${1}:${PATH//$1:/}
	fi
}

check_cmd(){
	type ${1} > /dev/null 2>&1 || { echo "${1} is not installed"; return 1; }
}

peco-run-cmd(){
	if [ -n "$1" ] ; then
		# Replace the last entry, with $1
		history -s $1
		# Execute it
		echo $1 >&2
		eval $1
	else
		# Remove the last entry
		history -d $((HISTCMD-1))
	fi
}

peco-src () {
	check_cmd "peco" || return
	check_cmd "ghq" || return
	local DIR="$(ghq list -p | peco)"
	if [ ! -z "${DIR}" ]; then
		cd "${DIR}"
	fi
}

# ~/.inputrc
# "\C-]":"peco-src\n"

# http://qiita.com/yungsang/items/09890a06d204bf398eea
peco-history() {
	check_cmd "peco" || return
	local NUM=$(history | wc -l)
	local FIRST=$((-1*(NUM-1)))

	if [ $FIRST -eq 0 ] ; then
		# Remove the last entry, "peco-history"
		history -d $((HISTCMD-1))
		echo "No history" >&2
		return
	fi
	local CMD=$(fc -l $FIRST | sort -k 2 -k 1nr | uniq -f 1 | sort -nr | sed -r 's/^[0-9]+//' | peco | head -n 1)
	peco-run-cmd "$CMD"
}

# ~/.inputrc
# "\C-r":"peco-history\n"

peco-snippets() {
	check_cmd "peco" || return
	[ -f ${HOME}/.snippets ] || { echo "Couldn't find ~/.snippets"; return; }
	local CMD=$(grep -v "^#" ~/.snippets | sed '/^$/d' | peco)
	peco-run-cmd "$CMD"
}

# ~/.inputrc
# "\C-\\":"peco-snippets\n"

# http://k0kubun.hatenablog.com/entry/2014/07/06/033336
function peco-pkill() {
	check_cmd "peco" || return
	local CMD=$(for pid in $(ps aux | peco | awk '{ print $2 }'); do kill $pid; echo "Killed ${pid}"; done)
	peco-run-cmd "$CMD"
}

# ~/.inputrc
# "\C-k":"peco-pkill\n"

#
# LANG
#
export LANG=en_US.UTF-8

#
# History size & format
#
export HISTCONTROL=ignoredups:ignorespace
export HISTSIZE=10000
export HISTTIMEFORMAT="%F %T : "

# less prompt customize. See details for
# http://kazmax.zpp.jp/cmd/l/less.1.html
# http://qiita.com/hatchinee/items/586fb1c4915e2bb5c03b
#
export LESS='-X -R -i -P ?f%f:(stdin).  ?lb%lb?L/%L..  [?eEOF:?pb%pb\%..]'

#
# http://blog.elliptium.net/2011/11/less-homebrew
#
if type src-hilite-lesspipe.sh > /dev/null 2>&1;then
	LESSPIPE=`which src-hilite-lesspipe.sh`
	export LESSOPEN="| $LESSPIPE %s"
fi

#
# set EDITOR, PAGER
#
[ -x "/usr/bin/vim" ] && export EDITOR=/usr/bin/vim
[ -x "/usr/local/bin/vim" ] && export EDITOR=/usr/local/bin/vim
type less > /dev/null 2>&1 && export PAGER=/usr/bin/less

#
# avoid screen lock by hitting Ctrl+S
#
if [ ! -d /vagrant ]; then
	stty stop undef
fi

#
# append to the history file, don't overwrite it
#
shopt -s histappend

#
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
#
shopt -s checkwinsize

#
# PS1
#
psone(){
	bgcolor(){
		echo "\\[\\033[48;5;"$1"m\\]"
	}

	fgcolor(){
		echo "\\[\\033[38;5;"$1"m\\]"
	}

	resetcolor(){
		echo "\\[\\e[0m\\]"
	}

	# just for fun
	case "${OSTYPE}" in
	darwin*)
		local EMO_EYES="\xf0\x9f\x91\x80"
		local EMO_BURG="\xf0\x9f\x8d\x94"
		local EMO=`echo -e "${EMO_EYES}  "`
		local EMO=""
	esac

	# default coloring
	local BACKGROUND=0
	local UNAME=198
	local SYMBOL=147
	local HOST=173
	local DIRNAME=120
	local PROMPT=129
	local BRANCH=111

	# load color config if exists
	[ -f ${HOME}/.bash_color ] && . ${HOME}/.bash_color

	GIT_PS1_SHOWDIRTYSTATE=true

	# set PS1
	#export PS1="${EMO}$(bgcolor $BACKGROUND)$(fgcolor $UNAME)\u$(fgcolor $SYMBOL)@$(fgcolor $HOST)\h$(fgcolor $SYMBOL):$(fgcolor $DIRNAME)\$PWD$(fgcolor $BRANCH)"'$(__git_ps1 ":(%s)")'"$(fgcolor $PROMPT)"'\$'"$(resetcolor) "
	export PS1="${EMO}$(bgcolor $BACKGROUND)$(fgcolor $UNAME)\u$(fgcolor $SYMBOL)@$(fgcolor $HOST)\h$(fgcolor $SYMBOL)$(fgcolor $BRANCH)"'$(__git_ps1 ":(%s)")'"$(fgcolor $PROMPT)"'\$'"$(resetcolor) "

	unset bgcolor
	unset fgcolor
	unset resetcolor
}

#
# reset default path and adding /usr/local/bin and /usr/local/sbin at proper position
#
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:${HOME}/bin"

#
# path
#
case "${OSTYPE}" in
darwin*)
	#
	# for homebrew cask
	#
	export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/usr/local/Caskroom"

	#
	# coreutils
	#
	[ -d /usr/local/opt/coreutils ] && addpath /usr/local/opt/coreutils/libexec/gnubin
	[ -d /usr/local/opt/coreutils ] && addpath /usr/local/opt/coreutils/libexec/gnuman man

	#
	# rbenv
	#
	type rbenv >/dev/null 2>&1 && eval "$(rbenv init -)"

	#
	# bash completion (need brew install bash-completion)
	#
	if [ -f $(brew --prefix)/etc/bash_completion ]; then
		. $(brew --prefix)/etc/bash_completion
	fi

	#
	# aws cli completion
	#
	if [ -x $(brew --prefix)/bin/aws ]; then
		complete -C aws_completer aws
	fi

	#
	# git bash completion
	#
	if [ -d /usr/local/opt/git/etc/bash_completion.d ]; then
		source /usr/local/opt/git/etc/bash_completion.d/git-prompt.sh
		source /usr/local/opt/git/etc/bash_completion.d/git-completion.bash
	fi

	;;
linux*)
	#
	# Keychain
	#
	if [ -x /usr/bin/keychain ]; then
		keychain ${HOME}/.ssh/id_rsa
		source ${HOME}/.keychain/$HOSTNAME-sh
	fi

	#
	# rbenv
	#
	if [ -d ${HOME}/.rbenv ]; then
		addpath ${HOME}/.rbenv/bin
		eval "$(rbenv init -)"
	fi

	#
	# git bash completion
	#
	if [ -d /usr/local/git ]; then
		#
		# if compiled from source (mainly for CentOS 6)
		#
		source /usr/local/git/contrib/completion/git-completion.bash
		source /usr/local/git/contrib/completion/git-prompt.sh
	elif [ -d /usr/share/git-core/contrib/completion ]; then
		#
		# if installed via yum (mainly for Amazon Linux 2014.03)
		# /etc/bash_completion.d/git should be loaded 
		#
		source /usr/share/git-core/contrib/completion/git-prompt.sh
	fi

	;;
esac

#
# dotfiles
#
if [ -d ${HOME}/dotfiles/bin ]; then
	addpath ${HOME}/dotfiles/bin
fi

#
# nodebrew
#
if [ -d ${HOME}/.nodebrew/current/bin ]; then
	addpath ${HOME}/.nodebrew/current/bin
fi

#
# golang
#
if type go > /dev/null 2>&1; then
	#
	# set GOROOT for .vimrc (adding rtp)
	#
	case "${OSTYPE}" in
	darwin*)
		export GOROOT=/usr/local/opt/go/libexec
		;;
	linux*)
		export GOROOT=/usr/local/go
		;;
	esac
	export GOPATH=${HOME}
fi

#
# psone
#
psone

#
# archey
#
type archey > /dev/null 2>&1 && archey

#
# cowsay
#

# for Ubuntu
if [ -f /etc/lsb-release ]; then
	. /etc/lsb-release
	[ "${DISTRIB_ID}" == "Ubuntu" ] && addpath /usr/games
fi

type cowsay > /dev/null 2>&1 && COWSAY=true
type fortune > /dev/null 2>&1 && FORTUNE=true
if [ "${COWSAY}" == "true" -a "${FORTUNE}" == "true" ]; then
	fortune | cowsay -f small
fi

if [ "${COWSAY}" == "true" ]; then
	export ANSIBLE_NOCOWS=1
fi

#
# env specific additions
#
if [ -f ${HOME}/.bashrc.local ]; then
	source ${HOME}/.bashrc.local
fi
